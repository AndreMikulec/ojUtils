// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ifelseCNum
NumericVector ifelseCNum(LogicalVector test, NumericVector yes, NumericVector no);
RcppExport SEXP ojUtils_ifelseCNum(SEXP testSEXP, SEXP yesSEXP, SEXP noSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< LogicalVector >::type test(testSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type yes(yesSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type no(noSEXP );
        NumericVector __result = ifelseCNum(test, yes, no);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ifelseCLogic
LogicalVector ifelseCLogic(LogicalVector test, LogicalVector yes, LogicalVector no);
RcppExport SEXP ojUtils_ifelseCLogic(SEXP testSEXP, SEXP yesSEXP, SEXP noSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< LogicalVector >::type test(testSEXP );
        Rcpp::traits::input_parameter< LogicalVector >::type yes(yesSEXP );
        Rcpp::traits::input_parameter< LogicalVector >::type no(noSEXP );
        LogicalVector __result = ifelseCLogic(test, yes, no);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ifelseCInt
IntegerVector ifelseCInt(LogicalVector test, IntegerVector yes, IntegerVector no);
RcppExport SEXP ojUtils_ifelseCInt(SEXP testSEXP, SEXP yesSEXP, SEXP noSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< LogicalVector >::type test(testSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type yes(yesSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type no(noSEXP );
        IntegerVector __result = ifelseCInt(test, yes, no);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ifelseCChar
CharacterVector ifelseCChar(LogicalVector test, CharacterVector yes, CharacterVector no);
RcppExport SEXP ojUtils_ifelseCChar(SEXP testSEXP, SEXP yesSEXP, SEXP noSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< LogicalVector >::type test(testSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type yes(yesSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type no(noSEXP );
        CharacterVector __result = ifelseCChar(test, yes, no);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
